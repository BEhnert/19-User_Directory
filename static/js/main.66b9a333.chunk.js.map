{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","employees","setEmployees","filteredEmployees","setFilteredEmployees","useEffect","fetch","then","response","json","data","results","name","onChange","event","target","value","filter","each","first","includes","last","phone","email","dob","date","placeholder","className","map","index","src","picture","thumbnail","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OA8FeA,MA3Ff,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAERC,EAFQ,KAEGC,EAFH,OAGaF,mBAAS,IAHtB,gCAImCA,mBAAS,KAJ5C,mBAIRG,EAJQ,KAIWC,EAJX,KAqCb,OA/BFC,qBAAU,WACRC,MAAM,0EACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAaQ,EAAKC,SAClBP,EAAqBM,EAAKC,cAE3B,IAyBC,qCACA,mCACA,oDACA,iHAGA,uBAAOC,KAAK,aAAaC,SA7BR,SAACC,GAAW,IAAD,EACTA,EAAMC,OAAfC,GADkB,EACvBJ,KADuB,EAClBI,OACRb,EAAqBF,EAAUgB,QAClC,SAAAC,GAAI,OAAIA,EAAKN,KAAKO,MAAMC,SAASJ,IACjCE,EAAKN,KAAKS,KAAKD,SAASJ,IACxBE,EAAKI,MAAMF,SAASJ,IACpBE,EAAKK,MAAMH,SAASJ,IACpBE,EAAKM,IAAIC,KAAKL,SAASJ,MAC1BZ,EAAqBD,IAqBgCuB,YAAY,WAC7D,sBAAKC,UAAU,iBAAf,UACA,wCAGM,uCAIA,wCAGA,wCAGA,yCAKLxB,EAAkByB,KAAI,SAACV,EAAKW,GAC3B,OAEE,sBAAiBF,UAAU,iBAA3B,UACE,8BACA,qBAAKG,IAAKZ,EAAKa,QAAQC,UAAWC,IAAKJ,MAEvC,gCACCX,EAAKN,KAAKO,MADX,IACmBD,EAAKN,KAAKS,QAE7B,8BACCH,EAAKI,QAEN,8BACCJ,EAAKK,QAEN,8BACCL,EAAKM,IAAIC,SAdFI,UC1DHK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.66b9a333.chunk.js","sourcesContent":["import './App.css';\nimport {useEffect, useState} from 'react';\n\nfunction App() {\n\nconst [employees, setEmployees] = useState([]);\nconst [inputs, setInputs] = useState({});\nconst [filteredEmployees, setFilteredEmployees] = useState([]);\n\nuseEffect(() => {\n  fetch('https://randomuser.me/api/?results=50&inc=picture,name,phone,email,dob')\n  .then(response => response.json())\n  .then(data => {\n    setEmployees(data.results)\n    setFilteredEmployees(data.results)\n  })\n}, [])\n\nconst handleInputs = (event) => {\n  const {name,value} = event.target;\n  var filteredEmployees = (employees.filter(\n  (each => each.name.first.includes(value) || \n  (each.name.last.includes(value)) || \n  (each.phone.includes(value)) || \n  (each.email.includes(value)) ||\n  (each.dob.date.includes(value)))))\nsetFilteredEmployees(filteredEmployees);\n\n}\n\n// const handleSortName = (event) => {\n//   const {name,value} = event.target;\n//   var sorteddEmployees = (employees.sort((\n//     (each => each.name.first), (each => each.name.first)) => ))\n//   console.log(sorteddEmployees)\n//   // var sortedEmployees = employees.sort((a, b) => a.name.first.localeCompare(b.name.first))\n  \n\n  // }\n\n  return (\n    <>\n    <header>\n    <h1>Employee Directory</h1>\n    <h5>Click on carrots to sort by heading or use Search box to narrow your results</h5>\n    </header>\n\n    <input name=\"searchTerm\" onChange={handleInputs} placeholder=\"Search\"></input>\n    <div className=\"employees-grid\">\n    <div>\n        Image\n          </div>\n          <div>\n          Name \n          {/* <div name= \"sortName\" className=\"arrow-down\" onClick={handleSortName}></div> */}\n          </div>\n          <div>\n         Phone\n          </div>\n          <div>\n         Email\n          </div>\n          <div>\n          DOB\n          </div>\n\n    </div>\n    {filteredEmployees.map((each,index) => {\n      return(\n        \n        <div key={index} className=\"employees-grid\">\n          <div>\n          <img src={each.picture.thumbnail} alt={index}/>\n          </div>\n          <div>\n          {each.name.first} {each.name.last}\n          </div>\n          <div>\n          {each.phone}\n          </div>\n          <div>\n          {each.email}\n          </div>\n          <div>\n          {each.dob.date}\n          </div>\n        </div>\n      )\n    })\n    }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}